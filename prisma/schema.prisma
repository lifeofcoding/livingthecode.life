generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  scope             String?
  id_token          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token")
  accessToken  String?  @map("access_token")
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String?   @unique @db.VarChar(255)
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  isAdmin       Boolean   @default(false)
  articles      Article[]
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Article {
  id         Int        @id @default(autoincrement())
  authorId   String
  content    String     @db.VarChar(10000)
  title      String
  createdAt  DateTime   @default(now())
  author     User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  categories Category[] @relation("ArticleToCategory")
  pages     Page[]
}

model Category {
  id       Int       @id @default(autoincrement())
  content  String    @db.VarChar(10000)
  title    String    @unique
  articles Article[] @relation("ArticleToCategory")
}

model Page {
  id        Int      @id @default(autoincrement())
  title     String
  content   String   @db.VarChar(10000)
  createdAt DateTime @default(now())
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int
}